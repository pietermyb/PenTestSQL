using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using MySQL.Data.EntityFrameworkCore;
using MySQL.Data.EntityFrameworkCore.Extensions;
using Newtonsoft.Json.Serialization;
using PenTestSQL.Data;
using PenTestSQL.Data.Models;
using PenTestSQL.OData.Contracts;

using Microsoft.AspNetCore.OData.Extensions;
using Microsoft.AspNetCore.Routing;


namespace PenTestSQL
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfigurationRoot Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            var connString = Configuration.GetConnectionString("MySQLDBConnection");
            var userConnString = Configuration.GetConnectionString("MySQLDBUserConnection");

            services
                .AddEntityFrameworkMySQL()
                .AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseMySQL(connString);
            });

            services.AddDbContext<ApplicationIdentityDbContext>(options =>
            {
                options.UseMySQL(userConnString);
            });

            services.AddIdentity<ApplicationIdentityUser, ApplicationIdentityRole>()
                .AddEntityFrameworkStores<ApplicationIdentityDbContext>()
                .AddDefaultTokenProviders();

            // Add framework services.
            services.AddMvc(
                //config =>
                //{
                //    // Add XML Content Negotiation
                //    config.RespectBrowserAcceptHeader = true;
                //    config.InputFormatters.Add(new XmlSerializerInputFormatter());
                //    config.OutputFormatters.Add(new XmlSerializerOutputFormatter());
                //}
            )
            .AddJsonOptions(opts =>
             {
                 // Force Camel Case to JSON
                 opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
             });


            //services.AddOData<IMotorBikeService>(builder =>
            //{
            //    //builder.EnableLowerCamelCase();
            //    var service = builder.EntitySet<MotorBike>("MotorBikes");
            //    service.EntityType.RemoveProperty(x => x.Id);
            //    service.EntityType.RemoveProperty(x => x.RefId);
            //});

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseBrowserLink();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();
            app.UseIdentity();
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
            
            app.UseOData("odata");
        }
        
    }
}

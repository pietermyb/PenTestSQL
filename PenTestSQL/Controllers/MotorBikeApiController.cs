using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Microsoft.AspNetCore.Mvc;
using PenTestSQL.Data;
using PenTestSQL.Data.Models;

namespace PenTestSQL.Controllers
{
    [Route("api/[controller]")]
    public class MotorBikeApiController : Controller
    {
        private ApplicationDbContext _appDdContext;
        private Microsoft.EntityFrameworkCore.DbSet<MotorBike> _bikes;

        public MotorBikeApiController(ApplicationDbContext appDbContext)
        {
            _appDdContext = appDbContext;
            try
            {
                _bikes = _appDdContext.MotorBikes;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        // GET: api/MotorBikeApi
        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_bikes.ToList());
        }
        // GET api/MotorBikeApi/3
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            return Ok(_bikes.Where(p => p.Id == id).FirstOrDefault());
        }

        // POST api/MotorBikeApi
        [HttpPost]
        public IActionResult Post([FromBody]MotorBike value)
        {
            if (string.IsNullOrWhiteSpace(value.Name))
            {
                return BadRequest("Name cannot be empty");
            }

            value.Id = _bikes.Max(p => p.Id) + 1;
            _bikes.Add(value);
            return Created($"/api/MotorBikeApi/{value.Id}", value);
        }

        // PUT api/MotorBikeApi/3
        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody]MotorBike value)
        {
            var b = _bikes.Where(x => x.Id == id).FirstOrDefault();
            if (b != null)
            {
                b.Name = value.Name;
                b.Description = value.Description;
                b.Make = value.Make;
                b.Model = value.Model;
                b.Power = value.Power;
                b.Price = value.Price;
                b.TopSpeed = value.TopSpeed;
                b.Torque = value.Torque;
                b.ZeroToHundred = value.ZeroToHundred;
            }
            return Ok(b);
        }

        // DELETE api/MotorBikeApi/3
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var b = _bikes.Where(x => x.Id == id).FirstOrDefault();
            if (b != null)
            {
                _bikes.Remove(b);
            }
            return Ok();
        }
    }
}

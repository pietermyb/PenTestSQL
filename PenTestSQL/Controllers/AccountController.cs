using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using PenTestSQL.Data;
using PenTestSQL.Data.Models;
using PenTestSQL.Models;

namespace PenTestSQL.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationIdentityUser> userManager;
        private readonly SignInManager<ApplicationIdentityUser> loginManager;
        private readonly RoleManager<ApplicationIdentityRole> roleManager;
        private ApplicationIdentityDbContext _appIdentityDdContext;
        private ApplicationDbContext _appDdContext;

        public AccountController(
            ApplicationIdentityDbContext appIdentityDbContext,
            ApplicationDbContext appDdContext,
        UserManager<ApplicationIdentityUser> userManager,
        SignInManager<ApplicationIdentityUser> loginManager,
        RoleManager<ApplicationIdentityRole> roleManager)
        {
            _appDdContext = appDdContext;
            _appIdentityDdContext = appIdentityDbContext;

            _appIdentityDdContext.Database.EnsureCreated();
            _appDdContext.Database.EnsureCreated();

            this.userManager = userManager;
            this.loginManager = loginManager;
            this.roleManager = roleManager;
        }

        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Register(RegisterViewModel obj)
        {
            if (ModelState.IsValid)
            {
                ApplicationIdentityUser user = new ApplicationIdentityUser
                {
                    UserName = obj.UserName,
                    Email = obj.Email,
                    Name = obj.Name,
                    Surname = obj.Surname,
                    PhoneNumber = obj.PhoneNumber,
                };
                
                IdentityResult result = userManager.CreateAsync(user, obj.Password).Result;

                //Create a unsecure user profile for this demo
                var unsecureUser = new UserProfile
                {
                    FirstName = obj.Name,
                    LastName = obj.Surname,
                    Email = obj.Email,
                    Password = obj.Password,
                    IsAdmin = false
                };

                _appDdContext.UserProfiles.Add(unsecureUser);
                _appDdContext.SaveChanges();

                if (result.Succeeded)
                {
                    if (!roleManager.RoleExistsAsync("NormalUser").Result)
                    {
                        ApplicationIdentityRole role = new ApplicationIdentityRole();
                        role.Name = "NormalUser";
                        role.Description = "Perform normal operations.";
                        IdentityResult roleResult = roleManager.
                        CreateAsync(role).Result;
                        if (!roleResult.Succeeded)
                        {
                            ModelState.AddModelError("",
                             "Error while creating role!");
                            return View(obj);
                        }
                    }

                    userManager.AddToRoleAsync(user,
                                 "NormalUser").Wait();
                    return RedirectToAction("Login", "Account");
                }
            }
            return View(obj);
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Login(LoginViewModel obj)
        {
            if (ModelState.IsValid)
            {
                var result = loginManager.PasswordSignInAsync
                (obj.UserName, obj.Password,
                  obj.RememberMe, false).Result;

                if (result.Succeeded)
                {
                    return RedirectToAction("Index", "Home");
                }

                ModelState.AddModelError("", "Invalid login!");
            }

            return View(obj);
        }

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        public IActionResult LogOff()
        {
            loginManager.SignOutAsync().Wait();
            return RedirectToAction("Login", "Account");
        }
    }
}

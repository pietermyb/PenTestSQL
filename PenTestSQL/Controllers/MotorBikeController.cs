using Microsoft.AspNetCore.Mvc;
using PenTestSQL.Data.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using PenTestSQL.Data;
using System.Linq;
using PenTestSQL.Models.Extensions;
using Microsoft.EntityFrameworkCore;
using PenTestSQL.Models;
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Query;
using System.Collections.Generic;

namespace PenTestSQL.Controllers
{
    public class MotorBikeController : Controller
    {
        private readonly UserManager<ApplicationIdentityUser> userManager;
        private ApplicationDbContext _appDdContext;
        
        public MotorBikeController(ApplicationDbContext appDbContext,UserManager<ApplicationIdentityUser> userManager)
        {
            _appDdContext = appDbContext;
            _appDdContext.Database.EnsureCreated();

            this.userManager = userManager;
        }

        [Authorize]
        public IActionResult Index()
        {
            ApplicationIdentityUser user = userManager.GetUserAsync
                                 (HttpContext.User).Result;

            ViewBag.UserMessage = $"Welcome {user.Name} {user.Surname}";
            if (userManager.IsInRoleAsync(user, "NormalUser").Result)
            {
                ViewBag.RoleMessage = "You are a NormalUser.";
            }

            var motorBikes = _appDdContext.MotorBikes.ToList();
            var motorBikeVm = new MotorBikesViewModel
            {
                Bikes = motorBikes
            };

            return View(motorBikeVm);
        }

        [Authorize]
        public IActionResult Bikes(int? id)
        {
            var bikes = (id != null) 
                ? _appDdContext.MotorBikes.Include(m => m.Make).Where(b=>b.Id == id).ToList()
                : _appDdContext.MotorBikes.Include(m => m.Make).ToList();
            
            var bikeVM = bikes.Map();

            return View(bikeVM);
        }

        [HttpGet]
        public ActionResult Leaderboard(string orderBy = "votes", bool asc = true)
        {
            try
            {
                var query = "SELECT * FROM MotorBikes ORDER BY " + (orderBy == "votes" ? "Id" : orderBy) + (asc ? " ASC" : " DESC");
                
                var motorBikes = _appDdContext.MotorBikes.FromSql(query).ToList();

                PopulateMotorbikeRelationShips(motorBikes);

                if (orderBy == "votes")
                {
                    motorBikes = motorBikes.OrderByDescending(s => s.Votes.Count()).ToList();
                }

                var leaderboard = motorBikes.Select(m => new LeaderboardViewModel
                {
                    MotorBikeId = m.Id,
                    Make = m.Make.Name,
                    Model = m.Model,
                    PowerKw = m.Power,
                    TorqueNm = m.Torque,
                    ZeroToOneHundredKmInSecs = m.ZeroToHundred,
                    TopSpeedKm = m.TopSpeed,
                    Votes = m.Votes.Select(v => new Vote())
                }).ToList();

                if (motorBikes.Count() > 0 && orderBy.Length > 10)
                {
                    Console.WriteLine("BLIND INJECTION: {0}", query);
                }

                return View(leaderboard);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return View("LeaderBoardError");
            }
        }

        //EF 7 hack since it doesn't yet support lazy loading
        private void PopulateMotorbikeRelationShips(List<MotorBike> motorBikes)
        {
            foreach (var motorbike in motorBikes)
            {
                motorbike.Make = _appDdContext.Makes.Single(m => m.MakeId == motorbike.MakeId);
                motorbike.Votes = _appDdContext.Votes.Where(v => v.MotorBikeId == motorbike.Id).ToList();
            }
        }
    }
}
